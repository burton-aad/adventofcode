* Initial code

#+BEGIN_SRC
cpy a d
cpy 14 c
cpy 182 b
inc d
dec b
jnz b -2
dec c
jnz c -5
cpy d a
jnz 0 0
cpy a b
cpy 0 a
cpy 2 c
jnz b 2
jnz 1 6
dec b
dec c
jnz c -4
inc a
jnz 1 -7
cpy 2 b
jnz c 2
jnz 1 4
dec b
dec c
jnz 1 -4
jnz 0 0
out b
jnz a -19
jnz 1 -21
#+END_SRC

* Representation

** Extra func

add x y   -> x = x + y
mul x y z -> x = x + y*z

** Analyse

cpy a d   |
cpy 14 c  |
cpy 182 b |
inc d---- |-----------|
dec b     |-> add d b |
jnz b -2--|           |-> mul d b c
dec c     |           |
jnz c -5  |-----------|

----------| loop1
cpy d a   |

----------| loop2
jnz 0 0   |-> nop

cpy a b   |
cpy 0 a   |

cpy 2 c---|
jnz b 2   |-> loop
jnz 1 6   |   -> b --> 0
dec b     |      c --> 2 - (b % 2)
dec c     |      a --> b / 2
jnz c -4  |
inc a     |
jnz 1 -7--|

cpy 2 b   |

jnz c 2---|
jnz 1 4   |-> small loop to set b = 2 - c
dec b     |
dec c     |
jnz 1 -4--|

jnz 0 0   |-> nop
out b     |-> print b
jnz a -19 |-> if a != 0 goto loop2
jnz 1 -21 |-> goto loop 1


* Pseudo code simplifié

Initialisation: a = x

#+BEGIN_SRC python
  while True:
      a = x + 2548
      while a != 0: #loop2:
          c = 2 - (a % 2)
          a = a/2
          print 2-c
#+END_SRC

* Conclusion

On cherche a pour que la deuxième boucle donne :
- un nombre pair d'élément
- une clock correct (0, 1, 0, 1, ...)

#+BEGIN_SRC python :results output
  def make_clock(init_a):
      a = init_a + 2548
      t = []
      while a != 0:
          c = a % 2
          a = a/2
          t.append(c)
      return t

  def is_valid_clock(t):
      if len(t) % 2 == 1:
          return False
      s = t[0]
      for i in t:
          if i != s:
              return False
          s = (s + 1) % 2
      return True

  x = -1
  t = [0]
  while not is_valid_clock(t):
      x += 1
      t = make_clock(x)
  print x
#+END_SRC

#+RESULTS:
: 182

